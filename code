//echo "   //makes the text "..." ready to pass it to compiler

//g(i,x,t,o){ //function g returns waveheight, given time increment, note chord, volumn???, octave, 
// return((3&x&(i*( (3&i>>16?\"BY}6YB6%\":\"Qj}6jQ6%\")[t%8]+51)>>o))<<4);
// }; 
// >> has a higher precidence than & which is higher than ? so i is divided by 65536, 
// then the bottom 2 bits are checked. The first string is used if they are NOT 0
// the second string if they are zero. The resulting string is indexed by t modulo 8
// aka the bottom 3 bits of t and the resulting character is first increased by 51
// then multiplied by i, shifted right by o, bitwise and by x and 3, time 16.
//BY}6YB6% = 66,89,125,54,89,66,54,37 and Qj}6jQ6% = 81,106,125,54,106,81,54,37

// Encoding of notes:
//                                \/- original note hz
//                                        \/- actual resulting hz
//                                                \/- +51 values * (176/196) scaling ratio
//                                                         \/- theoretical error in hz
//                                                                  \/- error in percentage
//char    note      ascii   +51	orighz	realhz	equivhz  errhz    err%
//        F# / Gb   32      83	92.50	81.05	92.43	-0.0681   -0.0737%
//%       G         37      88	98.00	85.93	98.00	 0.0000    0.0000%
//*       G# / Ab   42      93	103.83	90.82	103.56	-0.2618   -0.2521%
//0       A         48      99	110.00	96.67	110.24	 0.2499    0.2272%
//6       A# / Bb   54      105	116.54	102.53	116.93 	 0.3918    0.3362%
//<       B         60      111	123.47	108.39	123.61	 0.1436    0.1163%
//B       C         66      117	130.81	114.25	130.29	-0.5145   -0.3933%
//I       C# / Db   73      124	138.59	121.09	138.09	-0.4990   -0.3601%
//Q       D         81      132	146.83	128.90	147.00	 0.1699    0.1157%
//Y       D# / Eb   89      140	155.56	136.71	155.90	 0.3490    0.2244%
//a       E         97      148	164.81	144.53	164.81	 0.0081    0.0049%
//j       F         106     157	174.61	153.32	174.84	 0.2309    0.1322%
//s       F# / Gb   115     166	185.00	162.10	184.86	-0.1363   -0.0737%
//}       G         125     176	196.00	171.87	196.00	 0.0000    0.0000%

//here is g unrolled.

#include <stdio.h>

int g(int i, int x, int t, int o) {
  int b; //all unspecified data types are int 
         //https://stackoverflow.com/questions/23874660/default-data-type-of-pa$
  char *c;
  b = i >> 16;//take the upper 2 bytes of 1st param aka i/65536
  b &= 3; //mask off all but the bottom 2 bits
  if (b != 0) {
     c = "BY}6YB6%"; //66,89,125,54,89,66,54,37 
  } else {
     c = "Qj}6jQ6%"; //81,106,125,54,106,81,54,37
     }
  b = (int)c[t%8]; //reuse b. index c with 3rd param modulo 8
  b += 51;
  b *= i; //multiple by 1st param. * is higher precidence than >>
  b >>= o; //shift right by 4th param 
  b &= x; //bitwize and with 2nd parm
  b &= 3; //take only the bottom 2 bits
  b <<= 4; //multiply by 16. 
  }


main(i, n, s){ //the following notes direct from the author
	for(i=0;;i++) {
		putchar( //call g 4 times and sum up the results
			// The bass
			g(i, 1,    // Volume never changes
			  n=i>>13, // Note changes every 2 seconds, walks through the chord string
		  	  12       // octave is very low
			 ) +
			// Melody(ish).
			g(i, s=i>>17, // volume changes slowly, i>>17
			  n^i>>12,    // note changes twice as often as the bass. Exponentiation, so it's picking notes from the chord kind of randomly
		 	  11          // One octave up from the bass
			 ) +
			// arpeggios
			g(i, s/3,        // volume changes 3 times slower(?) than melody's does
			  n+((i>>11)%3), // start at the current bass note n (but 2 octaves up), and quickly (i>>11) walk through the chord string in triplets (%3)
			  10             // an octave above the melody
			 ) +
			// higher, slower arpeggios
			g(i, s/5,          // volume changes 5 times slower(?) than melody. 3 and 5 are prime for longer time before repeats
			  8+n-((i>>10)%3), // like previous arpeggios but half the speed, and walking backwards through the notes not forwards
			  9                // and another octave up
		       )
		);
	}
}
//"  |  gcc -xc -&&./a.out      //compiles the program inside the echoed text
//  |  aplay        //plays programs text output at 8KHz. 
// Each char is the height of the wave form at that instant.
